#Tesk_1

# Создать список и заполнить его элементами различных типов данных.
# Реализовать скрипт проверки типа данных каждого элемента. Использовать функцию type() для проверки типа.
# Элементы списка можно не запрашивать у пользователя, а указать явно, в программе.

# number_1 = 7 % 9
# number_2 = 9.0
# str_1 = 'Marat'
# result = True
# list_1 = [7, 9.4, 'Hello']
# print(type(number_1))
# print(type(number_2))
# print(type(str_1))
# print(type(result))
# print(type(list_1))


#Tesk_2
# Для списка реализовать обмен значений соседних элементов.
# Значениями обмениваются элементы с индексами 0 и 1, 2 и 3 и т. д.
# При нечётном количестве элементов последний сохранить на своём месте.
# Для заполнения списка элементов нужно использовать функцию input().


# # number = input('Введите данные: ')
# # new_number = int(number)
# # print(number)
#
# number_1 = int(12)
# number_2 = int(79)
# number_1, number_2 = number_2, number_1
# print(number_1[-1:-2])
# # print(number[4:6])
# # print(number[6:8])
# # print(number[8:10])
#
# # var_1, var_2 = 20, 30
# # print(var_1, var_2)
# # var_1, var_2 = var_2, var_1
# # print(var_1, var_2)


#Tesk_3
# Пользователь вводит месяц в виде целого числа от 1 до 12.
# Сообщить, к какому времени года относится месяц (зима, весна, лето, осень).
# Напишите решения через list и dict.

# month = input('Введите номер месяца от 1 до 12: ')
# a = 'Winter'
# b = 'Spring'
# c = 'Summer'
# d = 'Autumn'
# month_dir = {'1': a, '2': a, '3': b, '4': b, '5': b, '6': c, '7': c, '8': c, '9': d, '10': d, '11': d, '12': a }
# print(month_dir[month])

#Tesk_4
# Пользователь вводит строку из нескольких слов, разделённых пробелами.
# Вывести каждое слово с новой строки. Строки нужно пронумеровать.
# Если слово длинное, выводить только первые 10 букв в слове.

# user_input = input('Введите слово: ')
# word = user_input.split()
# num = 1
# for words in word:
#     print(f'#{num} - {words[:10]}')
#     num += 1


    # Tesk_5
# Реализовать структуру «Рейтинг», представляющую собой набор натуральных чисел, который
# не возрастает. У пользователя нужно запрашивать новый элемент рейтинга. Если в рейтинге
# существуют элементы с одинаковыми значениями, то новый элемент с тем же значением должен
# разместиться после них.
# Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
# Пользователь ввёл число 3.
# Результат: 7, 5, 3, 3, 3, 2.
# Пользователь ввёл число 8.
# Результат: 8, 7, 5, 3, 3, 2.
# Пользователь ввёл число 1.
# Результат: 7, 5, 3, 3, 2, 1.
# Набор натуральных чисел можно задать сразу в коде, например, my_list = [7, 5, 3, 3, 2].
